{
  "openapi": "3.0.2",
  "info": {
    "title": "Proof of Backhaul",
    "version": "1.0"
  },
  "paths": {
    "/pre-login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "-----\n\n\tThis API is to be called before logging in.\n\n\tIt will return a 'message' that has to be signed and sent to '/login' API.\n\n\tThis will also create a cookie;\n\n\thence the '/login' API must be called in a session.",
        "operationId": "ApiPreLogin",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreloginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Set-Cookie": {
                "description": "initial cookie that is to be sent to '/login' API",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreloginResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "-----\n\n\tThis API logs in the user.\n\n\tThe user should send the 'message' that was received during the '/pre-login';\n\n\tand must sign the 'message' using privateKey.\n\n\tAnd send it in the 'signature' field.",
        "operationId": "ApiLogin",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/pre-login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Set-Cookie": {
                "description": "Cookie after successful login.\n\t\t\t\tIt must be presented for next API calls.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user-info": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "-----\n\n\tGet logged in user information.",
        "operationId": "ApiUserInfo",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "-----\n\n\tLogs out the user.",
        "operationId": "ApiLogout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prover": {
      "post": {
        "tags": [
          "Prover Information"
        ],
        "description": "-----\n\n\tGet information about a prover.",
        "operationId": "ApiProver",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProverRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProverResponse"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/provers": {
      "post": {
        "tags": [
          "Prover Information"
        ],
        "description": "-----\n\n\tGet all provers info.",
        "operationId": "ApiProvers",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProversResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/challenge-request": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\n\tRequest to create a new challenge.\n\n\tBefore calling this api 'startChallenge()' smart contract must be called.\n\n\tAnd the 'transaction' after calling the startChallenge must be provided.",
        "operationId": "ApiChallengeRequest",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/challenge-status": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\tGet the status of a given challenge.",
        "operationId": "ApiChallengeStatus",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/challenge-result": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "description": "-----\n\tPost the results of a challenge.",
        "operationId": "ApiChallengeResult",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeResultRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ws": {
      "get": {
        "tags": [
          "Websocket for Heartbeat and Notifications"
        ],
        "description": "-----\n\tA websocket connection for:\n\n\t\t1. Sending heartbeat (websocket ping).\n\t\t2. Receiving notification regarding challenges.",
        "operationId": "ApiHeartbeat",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "The cookie that was received after calling '/login' API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "-----\n\n\tThis opens up a websocket connection.\n\n\tThis response is the successful response.",
            "headers": {
              "Upgrade": {
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "websocket"
                  ]
                }
              },
              "Connection": {
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "Upgrade"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "-----\n\n\tThis message is sent to a 'prover' through websocket when a challenge\n\n\thas been scheduled\n\n\t// ignore the status code '201' given here.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeInfoForProver"
                }
              }
            }
          },
          "202": {
            "description": "-----\n\n\tThis message is sent to a 'challenger' through websocket when a challenge\n\n\thas been scheduled\n\n\t// ignore the status code '202' given here.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeInfoForChallenger"
                }
              }
            }
          },
          "401": {
            "description": "401 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PreloginRequest": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "-----\n\tThe key used for login"
          },
          "walletPublicKey": {
            "type": "string",
            "description": "-----\n\tThe wallet where all the rewards go.\n\n\tif 'walletPublicKey' is NOT provided, then:\n\t\twalletPublicKey = publicKey"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "solana"
            ],
            "description": "-----\n\tThe key-type of publicKey.\n\n\tAs of now these are supported keyTypes:\n\t\t1. solana"
          },
          "role": {
            "type": "string",
            "enum": [
              "prover",
              "challenger",
              "payer"
            ],
            "description": "-----\n \tThe role the user intends to play after login:\n\n\t\t1. prover\n\t\t\tUser who wants to prove what it offers to the network.\n\n\t\t\tExample: 'bandwidth', 'latency', 'disk', 'cpu' etc.\n\n\t\t2. challenger\n\t\t\tUser who wants to challenge a 'prover'\n\t\t\tand earn rewards.\n\n\t\t3. payer\n\t\t\tAn abstract entity/user who pays\n\t\t\tand requests for a challenge.\n\n\t\t\tA payer could be:\n\t\t\tthe 'prover' itself, other users, or the blockchain."
          },
          "projectName": {
            "type": "string",
            "description": "-----\n\tIf the user is also part of another blockchain project/app,\n\n\tthen the project-name/app-name can be provided here.\n\n\t\te.g. \"filecoin\", \"filecoin-station\", \"oort\", etc."
          },
          "projectPublicKey": {
            "type": "string",
            "description": "-----\n\tpublicKey of the user associated with the\n\n\t'projectName' blockchain project/app."
          },
          "bandwidth_claimed": {
            "type": "number",
            "format": "float",
            "description": "-----\n\tThe amount of bandwidth in Mbps the user has\n\t\tOR\n\twants to claim."
          }
        },
        "required": [
          "publicKey",
          "keyType",
          "role",
          "bandwidth_claimed"
        ]
      },
      "PreloginResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "-----\n\tA string to be signed using user's 'privateKey' to create a 'signature'.\n\n\tThis 'signature' should be later sent in the '/login' API to login."
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "FailureResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "description": "-----\n\tOn failure, the 'error.message' contains the reason for the failure."
          }
        },
        "required": [
          "error"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "-----\n\tThe 'message' received in the '/pre-login' API."
          },
          "signature": {
            "type": "string",
            "description": "-----\n\tThe signature afer signing the 'message' with the 'privateKey'."
          }
        },
        "required": [
          "message",
          "signature"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            },
            "required": [
              "success"
            ],
            "description": "-----\n\tSuccessful response always has a valid 'result'."
          }
        },
        "required": [
          "result"
        ]
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "publicKey": {
                "type": "string",
                "nullable": true,
                "description": "-----\n\n\twill return 'null' if the user has not logged in"
              }
            },
            "required": [
              "publicKey"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ProverRequest": {
        "type": "object",
        "properties": {
          "prover": {
            "type": "string",
            "description": "-----\n \tThe 'id' of the prover."
          }
        },
        "required": [
          "prover"
        ]
      },
      "GeoIP": {
        "type": "object",
        "properties": {
          "range": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "country": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "eu": {
            "type": "string",
            "enum": [
              "0",
              "1"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "ll": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "metro": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "range",
          "country",
          "region",
          "eu",
          "timezone",
          "city",
          "ll",
          "metro",
          "area"
        ]
      },
      "Result": {
        "type": "object",
        "properties": {
          "bandwidth": {
            "type": "number",
            "format": "float"
          },
          "latency": {
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "bandwidth",
          "latency"
        ]
      },
      "ChallengeResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Result"
            }
          },
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "challenger": {
            "type": "string"
          },
          "challenge_start_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "result",
          "message",
          "signature",
          "challenger",
          "challenge_start_time"
        ]
      },
      "ProverDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "-----\n\tThe unique 'id' of the prover."
          },
          "geoip": {
            "$ref": "#/components/schemas/GeoIP"
          },
          "last_alive": {
            "type": "string",
            "format": "date-time",
            "description": "-----\n\tThe latest time when the API server received a handshake from the prover."
          },
          "bandwidth_claimed": {
            "type": "number",
            "format": "float",
            "description": "-----\n \tThe amount of bandwidth in Mbps the user has OR wants to claim."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChallengeResult"
            },
            "description": "-----\n \tThe history of challenge results the proved has participated in."
          }
        },
        "required": [
          "id",
          "geoip",
          "last_alive",
          "bandwidth_claimed",
          "results"
        ]
      },
      "ProverResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ProverDetails"
          }
        },
        "required": [
          "result"
        ]
      },
      "ProversResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "provers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProverDetails"
                }
              }
            },
            "required": [
              "provers"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengeRequest": {
        "type": "object",
        "properties": {
          "prover": {
            "type": "string"
          },
          "transaction": {
            "type": "string"
          }
        },
        "required": [
          "prover",
          "transaction"
        ]
      },
      "ChallengeResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "challenge_status": {
                "type": "string",
                "enum": [
                  "SUBMITTED_TO_CHALLENGE_COORDINATOR",
                  "ACCEPTED_BY_CHALLENGE_COORDINATOR",
                  "ERROR_NOT_ENOUGH_CHALLENGERS",
                  "ENDED_SUCCESSFULLY"
                ]
              }
            },
            "required": [
              "challenge_id",
              "challenge_status"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengeStatusRequest": {
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string"
          }
        },
        "required": [
          "transaction"
        ]
      },
      "ChallengeStatusResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "start_challenge_transaction": {
                "type": "string"
              },
              "end_challenge_transaction": {
                "type": "string"
              },
              "challenge_status": {
                "type": "string",
                "enum": [
                  "SUBMITTED_TO_CHALLENGE_COORDINATOR",
                  "ACCEPTED_BY_CHALLENGE_COORDINATOR",
                  "ERROR_NOT_ENOUGH_CHALLENGERS",
                  "ENDED_SUCCESSFULLY"
                ]
              }
            },
            "required": [
              "challenge_id",
              "start_challenge_transaction",
              "challenge_status"
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "ChallengeResultRequest": {
        "type": "object",
        "properties": {
          "prover": {
            "type": "string"
          },
          "transaction": {
            "type": "string"
          }
        },
        "required": [
          "prover",
          "transaction"
        ]
      },
      "Challenger": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "ip",
          "publicKey"
        ]
      },
      "ChallengeInfoForProver": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "challenge_for_prover"
            ]
          },
          "message": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "challenge_start_time": {
                "type": "string",
                "format": "date-time"
              },
              "challenge_timeout": {
                "type": "string",
                "format": "date-time"
              },
              "challengers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Challenger"
                }
              },
              "max_packets_per_challenger": {
                "type": "integer",
                "format": "int32"
              },
              "total_num_packets_for_challenge": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "challenge_id",
              "challenge_start_time",
              "challenge_timeout",
              "challengers",
              "max_packets_per_challenger",
              "total_num_packets_for_challenge"
            ]
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "message_type",
          "message",
          "signature"
        ]
      },
      "Prover": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "ip",
          "publicKey"
        ]
      },
      "ChallengeInfoForChallenger": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "challenge_for_challenger"
            ]
          },
          "message": {
            "type": "object",
            "properties": {
              "challenge_id": {
                "type": "string"
              },
              "prover": {
                "$ref": "#/components/schemas/Prover"
              },
              "challenge_start_time": {
                "type": "string",
                "format": "date-time"
              },
              "challenge_timeout": {
                "type": "string",
                "format": "date-time"
              },
              "num_packets": {
                "type": "integer",
                "format": "int32"
              },
              "rate_of_packets_mbps": {
                "type": "number",
                "format": "float"
              },
              "total_num_packets_for_challenge": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "challenge_id",
              "prover",
              "challenge_start_time",
              "challenge_timeout",
              "num_packets",
              "rate_of_packets_mbps",
              "total_num_packets_for_challenge"
            ]
          },
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "message_type",
          "message",
          "signature"
        ]
      }
    },
    "securitySchemes": {
      "SecurityHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Cookie"
      }
    }
  },
  "security": [
    {
      "SecurityHeader": []
    }
  ],
  "servers": [
    {
      "url": "https://pob.witnesschain.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ]
}